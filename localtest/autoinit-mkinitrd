#!/usr/bin/bash

set -e

AUTOINIT="/usr/lib/autoinit/autoinit"
extra_files=()
copy_files_src=()
copy_files_dst=()
SYSROOT=/

add_copy() {
    copy_files_dst+=($1)
    copy_files_src+=($2)
}

echoerr() { echo "$@" 1>&2; }

usage() {
    if test "$#" -ne 0; then
        echo "$@"
        echo
    fi
    echo "Usage: autoinit-mkinitrd [OPTION...] FILE"
    echo
    echo " -h --help		Display usage"
    echo " --init=FILE		Specify custom init binary"
    echo " --add=FILE		Add file (from sysroot) to initrd, optionally with custom name in initrd"
    echo " --copy=FILE:DST	Copy file (not in sysroot) to initrd, with custom name"
    echo " --sysroot=PATH	Specify sysroot directory to collect files from"
}

VALID_ARGS=$(getopt -o h --long help,init:,add:,sysroot:,copy: -- "$@")
if [[ $? -ne 0 ]]; then
    exit 1;
fi

eval set -- "$VALID_ARGS"
while [ : ]; do
  case "$1" in
    --init)
        AUTOINIT="$2"
        shift 2
        ;;
    --add)
        extra_files+=($2)
        shift 2
        ;;
    --copy)
        SRCDST="$2"
        arrSRCDST=(${SRCDST//:/ })
        add_copy "${arrSRCDST[0]}" "${arrSRCDST[1]}"
        shift 2
        ;;
    --sysroot)
        if [ -d $2 ]; then
            SYSROOT="$2"
        else
            echoerr "No such directory $2"
            exit 1
        fi
        shift 2
        ;;
    --) shift;
        break
        ;;
    -h | --help)
        usage
        exit 0
  esac
done

if [ "$#" -lt 1 ]; then
    usage "Missing destination name"
    exit 1
fi

DEST=$1
shift

if test "$#" -ne 0; then
    usage "Unexpected commandline arguments: $@"
    exit 1
fi

BINS=/usr/lib/ostree/ostree-prepare-root

files=()
newfile=()
declare -A filesDict

need_file() {
    local file=$1
    if [ "${filesDict[$file]}" != 1 ]; then
        return 0
    fi
    return 1
}

add_file() {
    local file=$1
    local root=${2:-$SYSROT}
    if [ ! -e $root/$file ]; then
        echoerr Missing expected file $root/$file
        exit 1
    fi
    if [ "${filesDict[$file]}" != 1 ]; then
        add_parents $file $root
        filesDict[$file]=1
        files+=($file)
        newfiles+=($file)
    fi
}

add_parents() {
    local p=$(dirname $1)
    local root=${2:-$SYSROT}
    while [ "$p" != "/" ]; do
        add_file $p $root
        p=$(dirname $p)
    done
}

LIB_DIRS="$SYSROOT/lib64 $SYSROOT/lib $SYSROOT/usr/lib64 $SYSROOT/usr/lib"

list_deps() {
    local file=$1
    DEPS=$(readelf -d $file | grep "(NEEDED)" |  cut -d ":" -f 2 |  sed -e 's,\[,,g' -e 's,],,g' -e 's,[ ]*,,g')
    for dep in $DEPS; do
        local deppath=$(find -L $LIB_DIRS -name "${dep}" -maxdepth 1 -type f 2>/dev/null | head -1)
        if [ "${deppath}" == "" ]; then
            echoerr "Unable to find dependency $dep"
            exit 1
        fi
        echo ${deppath#$SYSROOT}
    done
}

add_binary() {
    local bin=$1
    add_file $bin
    local deps=$(list_deps $bin)
    for dep in $deps; do
        if need_file $dep; then
            add_binary $dep
        fi
    done
}

for bin in $BINS; do
    add_binary $bin
done

for file in "${extra_files[@]}"; do
    add_file "$file"
done

D=$(mktemp -d)

# Add files
for file in "${files[@]}"; do
    echo $(realpath -s -m --relative-to=/ $file)
done | cpio -D $SYSROOT  -L -H newc -o -O $D/initrd

# Add initrd
add_copy /init $AUTOINIT

# Reset newfiles so we can get an incremental list to copy
newfiles=()

mkdir $D/rootfs
for i in "${!copy_files_dst[@]}"; do
    dst="${copy_files_dst[$i]}"
    src="${copy_files_src[$i]}"

    if [ ! -e $src ]; then
        echoerr "Missing --copy source  $src"
        exit 1
    fi

    mkdir -p $D/rootfs/$(dirname $dst)
    cp $src $D/rootfs/$dst
    add_file $dst $D/rootfs
done

for file in "${newfiles[@]}"; do
    echo ${file#/};
done | cpio -D $D/rootfs  -L -H newc -o -A -R 0:0 -O $D/initrd



lz4 -l -9 -c $D/initrd > $DEST

rm -rf $D
